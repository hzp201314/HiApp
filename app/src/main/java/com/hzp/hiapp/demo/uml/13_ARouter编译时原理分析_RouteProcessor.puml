@startuml
'https://plantuml.com/sequence-diagram

autonumber

BaseProcessor.java -> BaseProcessor.java: init()
activate BaseProcessor.java
note right
BaseProcessor.java
@Override
public synchronized void init(ProcessingEnvironment processingEnv) {
    super.init(processingEnv);

    //文件生成工具类
    mFiler = processingEnv.getFiler();
    //元素类类型校验types对象，计算某个元素具体是什么类型
    types = processingEnv.getTypeUtils();
    //指定一个全类名可获取元素类型，
    //区分某个元素是Activity，ContentProvider...通过typeUtils与elementUtils工具类实现
    elementUtils = processingEnv.getElementUtils();
    typeUtils = new TypeUtils(types, elementUtils);
    //编译时期日志输出工具类
    logger = new Logger(processingEnv.getMessager());

    // Attempt to get user configuration [moduleName]
    //获取build.gradle文件arguments配置参数
    Map<String, String> options = processingEnv.getOptions();
    if (MapUtils.isNotEmpty(options)) {
        moduleName = options.get(KEY_MODULE_NAME);
        generateDoc = VALUE_ENABLE.equals(options.get(KEY_GENERATE_DOC_NAME));
    }

    //如果没有给模块build.gradle文件配置moduleName参数就抛出异常，终止本次编译
    if (StringUtils.isNotEmpty(moduleName)) {
        moduleName = moduleName.replaceAll("[^0-9a-zA-Z_]+", "");
        logger.info("The user has configuration the module name, it was [" + moduleName + "]");
    } else {
        logger.error(NO_MODULE_NAME_TIPS);
        throw new RuntimeException("ARouter::Compiler >>> No module name, for more information, look at gradle log.");
    }
}

//复写getSupportedOptions()方法让处理器支持参数透传
@Override
public Set<String> getSupportedOptions() {
    return new HashSet<String>() {{
        this.add(KEY_MODULE_NAME);
        this.add(KEY_GENERATE_DOC_NAME);
    }};
}

end note

'RouteProcessor注解处理器如何在编译器处理@Route注解
RouteProcessor.java -> RouteProcessor.java: init()
activate RouteProcessor.java
note right
RouteProcessor.java
//作用：
//扫描标记@Route注解的所有类，然后判断是页面Activity还是Provider服务，
//进而分门别类的利用javapoet工具类生成该模块下的路由组Class文件、根节点Class文件、Provider Class文件
//还可以生成路由json描述文件
//文件目录：app/build/generated/kapt/debug/com/alibaba/android/arouter/docs/
//文件目录：app/build/generated/kapt/debug/com/alibaba/android/arouter/routes/
@Override
public synchronized void init(ProcessingEnvironment processingEnv) {
    super.init(processingEnv);

    //解析到该模块在build.gradle文件中配置了需要在编译过程中生成路由json描述文件
    //会利用mFiler创建文件"arouter-map-of-" + moduleName + ".json"
    //文件目录：app/build/generated/kapt/debug/com/alibaba/android/arouter/docs/arouter-map-of-moduleName.json
    //文件标记了定义的一个个路由节点及基本信息，
    if (generateDoc) {
        try {
            docWriter = mFiler.createResource(
                    StandardLocation.SOURCE_OUTPUT,
                    PACKAGE_OF_GENERATE_DOCS,
                    "arouter-map-of-" + moduleName + ".json"
            ).openWriter();
        } catch (IOException e) {
            logger.error("Create doc writer failed, because " + e.getMessage());
        }
    }

    iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();
}
end note

RouteProcessor.java -> RouteProcessor.java: process()
activate RouteProcessor.java
note right
RouteProcessor.java

@Override
public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    //获取当前模块下标记了@Route注解所有类的集合
    Set<? extends Element> routeElements = roundEnv.getElementsAnnotatedWith(Route.class);

    //解析标记@Route注解所有类
    this.parseRoutes(routeElements);
}
end note

RouteProcessor.java -> RouteProcessor.java: parseRoutes(routeElements)
activate RouteProcessor.java
note right
RouteProcessor.java
//解析标记@Route注解所有类，生成注解处理文件
//ARouter$$Root$$module_name
//ARouter$$Group$activity\ARouter$$Group$fragment
//ARouter$$Providers$$module_name
private void parseRoutes(Set<? extends Element> routeElements) throws IOException {
    if (CollectionUtils.isNotEmpty(routeElements)) {
        //得到ACTIVITY类型的class文件编译时的元素类型
        TypeMirror type_Activity = elementUtils.getTypeElement(ACTIVITY).asType();
        //得到SERVICE类型的class文件编译时的元素类型
        TypeMirror type_Service = elementUtils.getTypeElement(SERVICE).asType();
        //得到FRAGMENT类型的class文件编译时的元素类型
        TypeMirror fragmentTm = elementUtils.getTypeElement(FRAGMENT).asType();
        //得到v4包FRAGMENT类型的class文件编译时的元素类型
        TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();

        // Interface of ARouter
        TypeElement type_IRouteGroup = elementUtils.getTypeElement(IROUTE_GROUP);
        TypeElement type_IProviderGroup = elementUtils.getTypeElement(IPROVIDER_GROUP);
        ClassName routeMetaCn = ClassName.get(RouteMeta.class);
        ClassName routeTypeCn = ClassName.get(RouteType.class);

        //利用javapoet组件去构造要生成的文件结构体
        //预先构建Root文件中loadInto()方法入参的结构体
        /*
           Build input type, format as :

           ```Map<String, Class<? extends IRouteGroup>>```
         */
        ParameterizedTypeName inputMapTypeOfRoot = ParameterizedTypeName.get(
                ClassName.get(Map.class),
                ClassName.get(String.class),
                ParameterizedTypeName.get(
                        ClassName.get(Class.class),
                        WildcardTypeName.subtypeOf(ClassName.get(type_IRouteGroup))
                )
        );

        //预先构建group、provider文件中loadInto()方法入参的结构体
        /*

          ```Map<String, RouteMeta>```
         */
        ParameterizedTypeName inputMapTypeOfGroup = ParameterizedTypeName.get(
                ClassName.get(Map.class),
                ClassName.get(String.class),
                ClassName.get(RouteMeta.class)
        );

        //构建root、group、provider三种文件类型中loadInto()方法入参结构体，同时指定入参名称
        /*
          Build input param name.
         */
        ParameterSpec rootParamSpec = ParameterSpec.builder(inputMapTypeOfRoot, "routes").build();
        ParameterSpec groupParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, "atlas").build();
        ParameterSpec providerParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, "providers").build();  // Ps. its param type same as groupParamSpec!

        //构建root文件中loadInto()方法结构体
        /*
          Build method : 'loadInto' of root
         */
        MethodSpec.Builder loadIntoMethodOfRootBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)
                .addAnnotation(Override.class)
                .addModifiers(PUBLIC)
                .addParameter(rootParamSpec);

        //构建Provider文件中loadInto()方法结构体
         /*
          Build method : 'loadInto' of provider
         */
        MethodSpec.Builder loadIntoMethodOfProviderBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)
                .addAnnotation(Override.class)
                .addModifiers(PUBLIC)
                .addParameter(providerParamSpec);

        //Group文件中loadInto()方法结构体在一个模块中可能存在多个路由组，因此需要在for循环中创建
        //  Follow a sequence, find out metas of group first, generate java file, then statistics them as root.
        for (Element element : routeElements) {
            TypeMirror tm = element.asType();
            Route route = element.getAnnotation(Route.class);
            RouteMeta routeMeta;

            //比对当前元素类型和原始类型，将class文件原始信息包装成一个RouteMeta对象
            if (types.isSubtype(tm, type_Activity)) {                 // Activity
                logger.info(">>> Found activity route: " + tm.toString() + " <<<");

                // Get all fields annotation by @Autowired
                Map<String, Integer> paramsType = new HashMap<>();
                Map<String, Autowired> injectConfig = new HashMap<>();
                for (Element field : element.getEnclosedElements()) {
                    if (field.getKind().isField() && field.getAnnotation(Autowired.class) != null && !types.isSubtype(field.asType(), iProvider)) {
                        // It must be field, then it has annotation, but it not be provider.
                        Autowired paramConfig = field.getAnnotation(Autowired.class);
                        String injectName = StringUtils.isEmpty(paramConfig.name()) ? field.getSimpleName().toString() : paramConfig.name();
                        paramsType.put(injectName, typeUtils.typeExchange(field));
                        injectConfig.put(injectName, paramConfig);
                    }
                }
                routeMeta = new RouteMeta(route, element, RouteType.ACTIVITY, paramsType);
                routeMeta.setInjectConfig(injectConfig);
            } else if (types.isSubtype(tm, iProvider)) {         // IProvider

                routeMeta = new RouteMeta(route, element, RouteType.PROVIDER, null);
            } else if (types.isSubtype(tm, type_Service)) {           // Service

                routeMeta = new RouteMeta(route, element, RouteType.parse(SERVICE), null);
            } else if (types.isSubtype(tm, fragmentTm) || types.isSubtype(tm, fragmentTmV4)) {

                routeMeta = new RouteMeta(route, element, RouteType.parse(FRAGMENT), null);
            } else {
                throw new RuntimeException("ARouter::Compiler >>> Found unsupported class type, type = [" + types.toString() + "].");
            }

            //把一个个element转换成RouteMeta对象之后，调用categories()方法，
            //把RouteMeta对象按照组的概念存储在groupMap集合中
            categories(routeMeta);
        }

        Map<String, List<RouteDoc>> docSource = new HashMap<>();

        // Start generate java source, structure is divided into upper and lower levels, used for demand initialization.
        //遍历得到的路由组groupMap，
        for (Map.Entry<String, Set<RouteMeta>> entry : groupMap.entrySet()) {
            String groupName = entry.getKey();
            //构建路由组groupMap的loadInto()方法结构体
            MethodSpec.Builder loadIntoMethodOfGroupBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)
                    .addAnnotation(Override.class)
                    .addModifiers(PUBLIC)
                    .addParameter(groupParamSpec);

            List<RouteDoc> routeDocList = new ArrayList<>();

            // Build group method body
            Set<RouteMeta> groupData = entry.getValue();
            //开启内嵌for循环，遍历每个路由组的RouteMeta对象
            for (RouteMeta routeMeta : groupData) {
                RouteDoc routeDoc = extractDocInfo(routeMeta);

                ClassName className = ClassName.get((TypeElement) routeMeta.getRawType());

                //判断路由节点类型
                switch (routeMeta.getType()) {
                    //如果节点是PROVIDER类型（对外提供服务节点），把routeMeta对象添加到Provider文件的loadInto()方法当中去
                    case PROVIDER:  // Need cache provider's super class
                        List<? extends TypeMirror> interfaces = ((TypeElement) routeMeta.getRawType()).getInterfaces();
                        for (TypeMirror tm : interfaces) {
                            routeDoc.addPrototype(tm.toString());

                            if (types.isSameType(tm, iProvider)) {   // Its implements iProvider interface himself.
                                // This interface extend the IProvider, so it can be used for mark provider
                                loadIntoMethodOfProviderBuilder.addStatement(
                                        "providers.put($S, $T.build($T." + routeMeta.getType() + ", $T.class, $S, $S, null, " + routeMeta.getPriority() + ", " + routeMeta.getExtra() + "))",
                                        (routeMeta.getRawType()).toString(),
                                        routeMetaCn,
                                        routeTypeCn,
                                        className,
                                        routeMeta.getPath(),
                                        routeMeta.getGroup());
                            } else if (types.isSubtype(tm, iProvider)) {
                                // This interface extend the IProvider, so it can be used for mark provider
                                loadIntoMethodOfProviderBuilder.addStatement(
                                        "providers.put($S, $T.build($T." + routeMeta.getType() + ", $T.class, $S, $S, null, " + routeMeta.getPriority() + ", " + routeMeta.getExtra() + "))",
                                        tm.toString(),    // So stupid, will duplicate only save class name.
                                        routeMetaCn,
                                        routeTypeCn,
                                        className,
                                        routeMeta.getPath(),
                                        routeMeta.getGroup());
                            }
                        }
                        break;
                    default:
                        break;
                }

                // Make map body for paramsType
                StringBuilder mapBodyBuilder = new StringBuilder();
                Map<String, Integer> paramsType = routeMeta.getParamsType();
                Map<String, Autowired> injectConfigs = routeMeta.getInjectConfig();
                if (MapUtils.isNotEmpty(paramsType)) {
                    List<RouteDoc.Param> paramList = new ArrayList<>();

                    for (Map.Entry<String, Integer> types : paramsType.entrySet()) {
                        mapBodyBuilder.append("put(\"").append(types.getKey()).append("\", ").append(types.getValue()).append("); ");

                        RouteDoc.Param param = new RouteDoc.Param();
                        Autowired injectConfig = injectConfigs.get(types.getKey());
                        param.setKey(types.getKey());
                        param.setType(TypeKind.values()[types.getValue()].name().toLowerCase());
                        param.setDescription(injectConfig.desc());
                        param.setRequired(injectConfig.required());

                        paramList.add(param);
                    }

                    routeDoc.setParams(paramList);
                }
                String mapBody = mapBodyBuilder.toString();

                //再接着把把routeMeta对象添加到Group路由组文件的loadInto()方法当中去
                loadIntoMethodOfGroupBuilder.addStatement(
                        "atlas.put($S, $T.build($T." + routeMeta.getType() + ", $T.class, $S, $S, " + (StringUtils.isEmpty(mapBody) ? null : ("new java.util.HashMap<String, Integer>(){{" + mapBodyBuilder.toString() + "}}")) + ", " + routeMeta.getPriority() + ", " + routeMeta.getExtra() + "))",
                        routeMeta.getPath(),
                        routeMetaCn,
                        routeTypeCn,
                        className,
                        routeMeta.getPath().toLowerCase(),
                        routeMeta.getGroup().toLowerCase());

                routeDoc.setClassName(className.toString());
                routeDocList.add(routeDoc);
            }

            //生成路由组文件
            // Generate groups
            String groupFileName = NAME_OF_GROUP + groupName;
            JavaFile.builder(PACKAGE_OF_GENERATE_FILE,
                    TypeSpec.classBuilder(groupFileName)
                            .addJavadoc(WARNING_TIPS)
                            .addSuperinterface(ClassName.get(type_IRouteGroup))
                            .addModifiers(PUBLIC)
                            .addMethod(loadIntoMethodOfGroupBuilder.build())
                            .build()
            ).build().writeTo(mFiler);

            logger.info(">>> Generated group: " + groupName + "<<<");
            rootMap.put(groupName, groupFileName);
            docSource.put(groupName, routeDocList);

            logger.info("RouteProcessor:groupFileName " + groupFileName);
        }

        if (MapUtils.isNotEmpty(rootMap)) {
            // Generate root meta by group name, it must be generated before root, then I can find out the class of group.
            for (Map.Entry<String, String> entry : rootMap.entrySet()) {
                loadIntoMethodOfRootBuilder.addStatement("routes.put($S, $T.class)", entry.getKey(), ClassName.get(PACKAGE_OF_GENERATE_FILE, entry.getValue()));
            }
        }

        //生成document json描述文件
        // Output route doc
        if (generateDoc) {
            docWriter.append(JSON.toJSONString(docSource, SerializerFeature.PrettyFormat));
            docWriter.flush();
            docWriter.close();
        }

        //生成对外提供服务的provider文件
        // Write provider into disk
        String providerMapFileName = NAME_OF_PROVIDER + SEPARATOR + moduleName;
        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,
                TypeSpec.classBuilder(providerMapFileName)
                        .addJavadoc(WARNING_TIPS)
                        .addSuperinterface(ClassName.get(type_IProviderGroup))
                        .addModifiers(PUBLIC)
                        .addMethod(loadIntoMethodOfProviderBuilder.build())
                        .build()
        ).build().writeTo(mFiler);

        logger.info(">>> Generated provider map, name is " + providerMapFileName + " <<<");

        //生成路由根节点Root文件
        // Write root meta into disk.
        String rootFileName = NAME_OF_ROOT + SEPARATOR + moduleName;
        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,
                TypeSpec.classBuilder(rootFileName)
                        .addJavadoc(WARNING_TIPS)
                        .addSuperinterface(ClassName.get(elementUtils.getTypeElement(ITROUTE_ROOT)))
                        .addModifiers(PUBLIC)
                        .addMethod(loadIntoMethodOfRootBuilder.build())
                        .build()
        ).build().writeTo(mFiler);

        logger.info(">>> Generated root, name is " + rootFileName + " <<<");
    }
}
end note


@enduml