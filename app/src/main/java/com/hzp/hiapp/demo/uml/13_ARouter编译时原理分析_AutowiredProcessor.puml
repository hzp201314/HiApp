@startuml
'https://plantuml.com/sequence-diagram

autonumber

'AutowiredProcessor注解处理器如何在编译时生成目标类参数自动注入文件
SecondActivity.java -> SecondActivity.java:
activate SecondActivity.java
note right
@Route(path = "/activity/second")
public class SecondActivity extends AppCompatActivity {
    @Autowired
    public String saleId;

    @Autowired
    public String shopId;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.layout_blank);

        ARouter.getInstance().inject(this);
    }
}

//编译完成后生成的类
public class SecondActivity$$ARouter$$Autowired implements ISyringe {
  private SerializationService serializationService;

  //在inject()方法中从activity Intent对象读取出传递进来的saleId和shopId，赋值给Activity中的字段
  @Override
  public void inject(Object target) {
    serializationService = ARouter.getInstance().navigation(SerializationService.class);
    SecondActivity substitute = (SecondActivity)target;
    substitute.saleId = substitute.getIntent().getStringExtra("saleId");
    substitute.shopId = substitute.getIntent().getStringExtra("shopId");
  }
}
end note

AutowiredProcessor.java -> AutowiredProcessor.java:process()
activate AutowiredProcessor.java
note right
AutowiredProcessor.java
@Override
public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
    //利用roundEnvironment扫描当前模块标记了@Autowired注解所有的字段，返回的elements集合
    //传递给categories()方法，
    categories(roundEnvironment.getElementsAnnotatedWith(Autowired.class));
    //接下来调用 generateHelper()生成一个在运行时能够为目标文件实现参数自动注入的文件
    generateHelper();

}
end note

AutowiredProcessor.java -> AutowiredProcessor.java :categories(elements)
activate AutowiredProcessor.java
note right
AutowiredProcessor.java
//在categories()方法中遍历elements集合
private void categories(Set<? extends Element> elements) throws IllegalAccessException {
    for (Element element : elements) {
         //调用element.getEnclosingElement()方法得到TypeElement实际上就是字段所在的类
        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();

        //得到字段所在类的TypeElement之后，就会把这个类和这个类当中标记的@Autowired注解的字段
        //以一对多的形式存储在parentAndChild Map集合中
        if (parentAndChild.containsKey(enclosingElement)) { // Has categries
            parentAndChild.get(enclosingElement).add(element);
        } else {
            List<Element> childs = new ArrayList<>();
            childs.add(element);
            parentAndChild.put(enclosingElement, childs);
        }
    }
}
end note
deactivate AutowiredProcessor.java

AutowiredProcessor.java -> AutowiredProcessor.java :generateHelper()
activate AutowiredProcessor.java
note right
AutowiredProcessor.java
private void generateHelper() throws IOException, IllegalAccessException {
    TypeElement type_ISyringe = elementUtils.getTypeElement(ISYRINGE);
    TypeElement type_JsonService = elementUtils.getTypeElement(JSON_SERVICE);
    TypeMirror iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();
    TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType();
    TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType();
    TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();

    // Build input param name.
    ParameterSpec objectParamSpec = ParameterSpec.builder(TypeName.OBJECT, "target").build();

    if (MapUtils.isNotEmpty(parentAndChild)) {
        //开启for循环，为刚刚收集到的每一个页面生成一个ARouter$$Autowired.java类
        for (Map.Entry<TypeElement, List<Element>> entry : parentAndChild.entrySet()) {
            // Build method : 'inject'
            //构造出inject()方法的结构体，之后是为inject()方法添加一行行的语法表达式
            MethodSpec.Builder injectMethodBuilder = MethodSpec.methodBuilder(METHOD_INJECT)
                    .addAnnotation(Override.class)
                    .addModifiers(PUBLIC)
                    .addParameter(objectParamSpec);

            TypeElement parent = entry.getKey();
            List<Element> childs = entry.getValue();

            String qualifiedName = parent.getQualifiedName().toString();
            String packageName = qualifiedName.substring(0, qualifiedName.lastIndexOf("."));
            String fileName = parent.getSimpleName() + NAME_OF_AUTOWIRED;

            logger.info(">>> Start process " + childs.size() + " field in " + parent.getSimpleName() + " ... <<<");

            TypeSpec.Builder helper = TypeSpec.classBuilder(fileName)
                    .addJavadoc(WARNING_TIPS)
                    .addSuperinterface(ClassName.get(type_ISyringe))
                    .addModifiers(PUBLIC);

            FieldSpec jsonServiceField = FieldSpec.builder(TypeName.get(type_JsonService.asType()), "serializationService", Modifier.PRIVATE).build();
            helper.addField(jsonServiceField);

            //在inject()方法中获取一个serializationService序列化服务，这个服务实际上在应用层在自己定义的
            //ARouter只是提供一个这样的接口，如果在路由的时候有传递序列化的数据对象，此时就需要使用serializationService
            //来做序列化以及反序列化，如果没有定义serializationService序列化服务，在解析的时候得到的值就会为空
            injectMethodBuilder.addStatement("serializationService = $T.getInstance().navigation($T.class)", ARouterClass, ClassName.get(type_JsonService));
            //将得到的Object traget 强转成目标类的类型
            injectMethodBuilder.addStatement("$T substitute = ($T)target", ClassName.get(parent), ClassName.get(parent));

            // Generate method body, start inject.
            for (Element element : childs) {
                Autowired fieldConfig = element.getAnnotation(Autowired.class);
                String fieldName = element.getSimpleName().toString();
                if (types.isSubtype(element.asType(), iProvider)) {  // It's provider
                    if ("".equals(fieldConfig.name())) {    // User has not set service path, then use byType.

                        // Getter
                        injectMethodBuilder.addStatement(
                                "substitute." + fieldName + " = $T.getInstance().navigation($T.class)",
                                ARouterClass,
                                ClassName.get(element.asType())
                        );
                    } else {    // use byName
                        // Getter
                        injectMethodBuilder.addStatement(
                                "substitute." + fieldName + " = ($T)$T.getInstance().build($S).navigation()",
                                ClassName.get(element.asType()),
                                ARouterClass,
                                fieldConfig.name()
                        );
                    }

                    // Validater
                    if (fieldConfig.required()) {
                        injectMethodBuilder.beginControlFlow("if (substitute." + fieldName + " == null)");
                        injectMethodBuilder.addStatement(
                                "throw new RuntimeException(\"The field '" + fieldName + "' is null, in class '\" + $T.class.getName() + \"!\")", ClassName.get(parent));
                        injectMethodBuilder.endControlFlow();
                    }
                } else {    // It's normal intent value
                    String originalValue = "substitute." + fieldName;
                    String statement = "substitute." + fieldName + " = " + buildCastCode(element) + "substitute.";
                    boolean isActivity = false;
                    //判断当前页面是Activity还是fragment,来判断是通过getIntent()还是getArguments()读取参数
                    if (types.isSubtype(parent.asType(), activityTm)) {  // Activity, then use getIntent()
                        isActivity = true;
                        statement += "getIntent().";
                    } else if (types.isSubtype(parent.asType(), fragmentTm) || types.isSubtype(parent.asType(), fragmentTmV4)) {   // Fragment, then use getArguments()
                        statement += "getArguments().";
                    } else {
                        throw new IllegalAccessException("The field [" + fieldName + "] need autowired from intent, its parent must be activity or fragment!");
                    }

                    //读取参数时还要校验参数类型，时Boolean、Int、String...
                    //最终把所有页面所有字段的值自动注入读取工作都给写入文件SecondActivity$$ARouter$$Autowired中。
                    //这样一来，在SecondActivity文件中调用ARouter.getInstance().inject(this)方法
                    //并且把SecondActivity文件本身传递进去，这个时候就会根据SecondActivity的SampleName去
                    //找到生成的SecondActivity$$ARouter$$Autowired全类名，进而反射构造类的实例化对象
                    //然后调用inject()方法完成目标页的参数的自动注入工作
                    //从以上两个处理器的源码分析，体会到注解处理器这种自动化的工作方式能够减少不少工作量
                    statement = buildStatement(originalValue, statement, typeUtils.typeExchange(element), isActivity);
                    if (statement.startsWith("serializationService.")) {   // Not mortals
                        injectMethodBuilder.beginControlFlow("if (null != serializationService)");
                        injectMethodBuilder.addStatement(
                                "substitute." + fieldName + " = " + statement,
                                (StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name()),
                                ClassName.get(element.asType())
                        );
                        injectMethodBuilder.nextControlFlow("else");
                        injectMethodBuilder.addStatement(
                                "$T.e(\"" + Consts.TAG + "\", \"You want automatic inject the field '" + fieldName + "' in class '$T' , then you should implement 'SerializationService' to support object auto inject!\")", AndroidLog, ClassName.get(parent));
                        injectMethodBuilder.endControlFlow();
                    } else {
                        injectMethodBuilder.addStatement(statement, StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name());
                    }

                    // Validator
                    if (fieldConfig.required() && !element.asType().getKind().isPrimitive()) {  // Primitive wont be check.
                        injectMethodBuilder.beginControlFlow("if (null == substitute." + fieldName + ")");
                        injectMethodBuilder.addStatement(
                                "$T.e(\"" + Consts.TAG + "\", \"The field '" + fieldName + "' is null, in class '\" + $T.class.getName() + \"!\")", AndroidLog, ClassName.get(parent));
                        injectMethodBuilder.endControlFlow();
                    }
                }
            }

            helper.addMethod(injectMethodBuilder.build());

            // Generate autowire helper
            JavaFile.builder(packageName, helper.build()).build().writeTo(mFiler);

            logger.info(">>> " + parent.getSimpleName() + " has been processed, " + fileName + " has been generated. <<<");
        }

        logger.info(">>> Autowired processor stop. <<<");
    }
}
end note
deactivate AutowiredProcessor.java

InterceptorProcessor.java -> InterceptorProcessor.java
activate InterceptorProcessor.java
note right
InterceptorProcessor.java
//InterceptorProcessor注解处理器能够扫描当前模块下标记了@Interceptor注解的所有类
//然后去把注解处理器信息写入到文件中。类似AutowiredProcessor注解处理器

end note

@enduml